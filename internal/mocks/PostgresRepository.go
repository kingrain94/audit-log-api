// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	repository "github.com/kingrain94/audit-log-api/internal/repository"
	mock "github.com/stretchr/testify/mock"
)

// PostgresRepository is an autogenerated mock type for the PostgresRepository type
type PostgresRepository struct {
	mock.Mock
}

// AuditLog provides a mock function with no fields
func (_m *PostgresRepository) AuditLog() repository.AuditLogRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for AuditLog")
	}

	var r0 repository.AuditLogRepository
	if rf, ok := ret.Get(0).(func() repository.AuditLogRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.AuditLogRepository)
		}
	}

	return r0
}

// Tenant provides a mock function with no fields
func (_m *PostgresRepository) Tenant() repository.TenantRepository {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Tenant")
	}

	var r0 repository.TenantRepository
	if rf, ok := ret.Get(0).(func() repository.TenantRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.TenantRepository)
		}
	}

	return r0
}

// NewPostgresRepository creates a new instance of PostgresRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPostgresRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PostgresRepository {
	mock := &PostgresRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
