// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kingrain94/audit-log-api/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// OpenSearchRepository is an autogenerated mock type for the OpenSearchRepository type
type OpenSearchRepository struct {
	mock.Mock
}

// BulkIndex provides a mock function with given fields: ctx, logs
func (_m *OpenSearchRepository) BulkIndex(ctx context.Context, logs []domain.AuditLog) error {
	ret := _m.Called(ctx, logs)

	if len(ret) == 0 {
		panic("no return value specified for BulkIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.AuditLog) error); ok {
		r0 = rf(ctx, logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateIndex provides a mock function with given fields: ctx, tenantID, t
func (_m *OpenSearchRepository) CreateIndex(ctx context.Context, tenantID string, t time.Time) error {
	ret := _m.Called(ctx, tenantID, t)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, tenantID, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIndex provides a mock function with given fields: ctx, tenantID
func (_m *OpenSearchRepository) DeleteIndex(ctx context.Context, tenantID string) error {
	ret := _m.Called(ctx, tenantID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndex")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, tenantID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Index provides a mock function with given fields: ctx, log
func (_m *OpenSearchRepository) Index(ctx context.Context, log *domain.AuditLog) error {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Index")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuditLog) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, filter
func (_m *OpenSearchRepository) Search(ctx context.Context, filter *domain.AuditLogFilter) ([]domain.AuditLog, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []domain.AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuditLogFilter) ([]domain.AuditLog, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuditLogFilter) []domain.AuditLog); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.AuditLogFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewOpenSearchRepository creates a new instance of OpenSearchRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpenSearchRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpenSearchRepository {
	mock := &OpenSearchRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
