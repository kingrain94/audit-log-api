// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/kingrain94/audit-log-api/internal/api/dto"
	domain "github.com/kingrain94/audit-log-api/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// TenantService is an autogenerated mock type for the TenantService type
type TenantService struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, req
func (_m *TenantService) Create(ctx context.Context, req dto.CreateTenantRequest) (dto.CreateTenantResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 dto.CreateTenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateTenantRequest) (dto.CreateTenantResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateTenantRequest) dto.CreateTenantResponse); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.CreateTenantResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.CreateTenantRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *TenantService) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *TenantService) GetByID(ctx context.Context, id string) (*domain.Tenant, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.Tenant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Tenant, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Tenant); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Tenant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx
func (_m *TenantService) List(ctx context.Context) ([]dto.CreateTenantResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []dto.CreateTenantResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]dto.CreateTenantResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []dto.CreateTenantResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.CreateTenantResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, tenant
func (_m *TenantService) Update(ctx context.Context, tenant *domain.Tenant) error {
	ret := _m.Called(ctx, tenant)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Tenant) error); ok {
		r0 = rf(ctx, tenant)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTenantService creates a new instance of TenantService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTenantService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TenantService {
	mock := &TenantService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
