// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kingrain94/audit-log-api/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AuditLogRepository is an autogenerated mock type for the AuditLogRepository type
type AuditLogRepository struct {
	mock.Mock
}

// BulkCreate provides a mock function with given fields: ctx, logs
func (_m *AuditLogRepository) BulkCreate(ctx context.Context, logs []domain.AuditLog) error {
	ret := _m.Called(ctx, logs)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.AuditLog) error); ok {
		r0 = rf(ctx, logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, log
func (_m *AuditLogRepository) Create(ctx context.Context, log *domain.AuditLog) error {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuditLog) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBeforeDate provides a mock function with given fields: ctx, tenantID, beforeDate
func (_m *AuditLogRepository) DeleteBeforeDate(ctx context.Context, tenantID string, beforeDate time.Time) (int64, error) {
	ret := _m.Called(ctx, tenantID, beforeDate)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBeforeDate")
	}

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) (int64, error)); ok {
		return rf(ctx, tenantID, beforeDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) int64); ok {
		r0 = rf(ctx, tenantID, beforeDate)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, tenantID, beforeDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *AuditLogRepository) GetByID(ctx context.Context, id string) (*domain.AuditLog, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.AuditLog, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.AuditLog); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecentLogs provides a mock function with given fields: ctx, tenantID, since
func (_m *AuditLogRepository) GetRecentLogs(ctx context.Context, tenantID string, since time.Time) ([]domain.AuditLog, error) {
	ret := _m.Called(ctx, tenantID, since)

	if len(ret) == 0 {
		panic("no return value specified for GetRecentLogs")
	}

	var r0 []domain.AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) ([]domain.AuditLog, error)); ok {
		return rf(ctx, tenantID, since)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) []domain.AuditLog); ok {
		r0 = rf(ctx, tenantID, since)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, time.Time) error); ok {
		r1 = rf(ctx, tenantID, since)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStats provides a mock function with given fields: ctx, filter
func (_m *AuditLogRepository) GetStats(ctx context.Context, filter domain.AuditLogFilter) (*domain.AuditLogStats, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *domain.AuditLogStats
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.AuditLogFilter) (*domain.AuditLogStats, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.AuditLogFilter) *domain.AuditLogStats); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.AuditLogStats)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.AuditLogFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, filter
func (_m *AuditLogRepository) List(ctx context.Context, filter domain.AuditLogFilter) ([]domain.AuditLog, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.AuditLog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.AuditLogFilter) ([]domain.AuditLog, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.AuditLogFilter) []domain.AuditLog); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.AuditLog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.AuditLogFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuditLogRepository creates a new instance of AuditLogRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditLogRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditLogRepository {
	mock := &AuditLogRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
