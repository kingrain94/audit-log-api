// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	dto "github.com/kingrain94/audit-log-api/internal/api/dto"
	domain "github.com/kingrain94/audit-log-api/internal/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// AuditLogService is an autogenerated mock type for the AuditLogService type
type AuditLogService struct {
	mock.Mock
}

// BulkCreate provides a mock function with given fields: ctx, reqs
func (_m *AuditLogService) BulkCreate(ctx context.Context, reqs []dto.CreateAuditLogRequest) error {
	ret := _m.Called(ctx, reqs)

	if len(ret) == 0 {
		panic("no return value specified for BulkCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []dto.CreateAuditLogRequest) error); ok {
		r0 = rf(ctx, reqs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: ctx, req
func (_m *AuditLogService) Create(ctx context.Context, req dto.CreateAuditLogRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.CreateAuditLogRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *AuditLogService) GetByID(ctx context.Context, id string) (*dto.AuditLogResponse, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *dto.AuditLogResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*dto.AuditLogResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *dto.AuditLogResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.AuditLogResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStats provides a mock function with given fields: ctx, filter
func (_m *AuditLogService) GetStats(ctx context.Context, filter *domain.AuditLogFilter) (*dto.GetAuditLogStatsResponse, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetStats")
	}

	var r0 *dto.GetAuditLogStatsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuditLogFilter) (*dto.GetAuditLogStatsResponse, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuditLogFilter) *dto.GetAuditLogStatsResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetAuditLogStatsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.AuditLogFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatsV2 provides a mock function with given fields: ctx, filter
func (_m *AuditLogService) GetStatsV2(ctx context.Context, filter *domain.AuditLogFilter) (*dto.GetAuditLogStatsResponse, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetStatsV2")
	}

	var r0 *dto.GetAuditLogStatsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuditLogFilter) (*dto.GetAuditLogStatsResponse, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuditLogFilter) *dto.GetAuditLogStatsResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.GetAuditLogStatsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.AuditLogFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: ctx, filter, usePagination
func (_m *AuditLogService) List(ctx context.Context, filter *domain.AuditLogFilter, usePagination bool) ([]dto.AuditLogResponse, error) {
	ret := _m.Called(ctx, filter, usePagination)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []dto.AuditLogResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuditLogFilter, bool) ([]dto.AuditLogResponse, error)); ok {
		return rf(ctx, filter, usePagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuditLogFilter, bool) []dto.AuditLogResponse); ok {
		r0 = rf(ctx, filter, usePagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dto.AuditLogResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.AuditLogFilter, bool) error); ok {
		r1 = rf(ctx, filter, usePagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScheduleArchive provides a mock function with given fields: ctx, tenantID, beforeDate
func (_m *AuditLogService) ScheduleArchive(ctx context.Context, tenantID string, beforeDate time.Time) error {
	ret := _m.Called(ctx, tenantID, beforeDate)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleArchive")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, tenantID, beforeDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuditLogService creates a new instance of AuditLogService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditLogService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditLogService {
	mock := &AuditLogService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
