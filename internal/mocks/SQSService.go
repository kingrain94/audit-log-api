// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/kingrain94/audit-log-api/internal/domain"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// SQSService is an autogenerated mock type for the SQSService type
type SQSService struct {
	mock.Mock
}

// SendArchiveMessage provides a mock function with given fields: ctx, tenantID, beforeDate
func (_m *SQSService) SendArchiveMessage(ctx context.Context, tenantID string, beforeDate time.Time) error {
	ret := _m.Called(ctx, tenantID, beforeDate)

	if len(ret) == 0 {
		panic("no return value specified for SendArchiveMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, tenantID, beforeDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendBulkIndexMessage provides a mock function with given fields: ctx, logs
func (_m *SQSService) SendBulkIndexMessage(ctx context.Context, logs []domain.AuditLog) error {
	ret := _m.Called(ctx, logs)

	if len(ret) == 0 {
		panic("no return value specified for SendBulkIndexMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.AuditLog) error); ok {
		r0 = rf(ctx, logs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendCleanupMessage provides a mock function with given fields: ctx, tenantID, beforeDate
func (_m *SQSService) SendCleanupMessage(ctx context.Context, tenantID string, beforeDate time.Time) error {
	ret := _m.Called(ctx, tenantID, beforeDate)

	if len(ret) == 0 {
		panic("no return value specified for SendCleanupMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, time.Time) error); ok {
		r0 = rf(ctx, tenantID, beforeDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendIndexMessage provides a mock function with given fields: ctx, log
func (_m *SQSService) SendIndexMessage(ctx context.Context, log *domain.AuditLog) error {
	ret := _m.Called(ctx, log)

	if len(ret) == 0 {
		panic("no return value specified for SendIndexMessage")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.AuditLog) error); ok {
		r0 = rf(ctx, log)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewSQSService creates a new instance of SQSService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSQSService(t interface {
	mock.TestingT
	Cleanup(func())
}) *SQSService {
	mock := &SQSService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
